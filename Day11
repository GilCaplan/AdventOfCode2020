public class Puzzle11 {
public static Scanner reader= new Scanner(System.in);
	public static char[][] getInput(char[][] input) {//gets input
			int j=0;
			String s="",str="";
			while(!str.equals("-1")) {
				 s= reader.nextLine();
				 if(!s.equals("-1")) {
					 for(int i=0;i<input.length;i++ ) {
					    input[i][j]=s.charAt(i);
					    } 
				 }
				 else {str="-1";}
				 j++;
				}
			return input;
		}
	public static boolean up(char[][] input,int x,int y) {//checks if there is an occupied seat straight above
//			case "up":
		if(y-1>=0) {
			for(int i=y-1;i>=0;i--) {
				if(input[x][i]=='#') {return true;}
				else  {if(input[x][i]=='L')return false;}
					}
				}
				return false;
	}
	public static boolean down(char[][] input,int x,int y) {//checks if there is an occupied seat below
//		    case "down":
		    	if(y+1<input[0].length) {
					for(int i=y+1;i<input[0].length;i++) {
						if(input[x][i]=='#') {return true;}
						else {if(input[x][i]=='L')return false;}
					}
		    	}
		    	return false;
	}
	public static boolean right(char[][] input,int x,int y) {//checks if there is an occupied seat to the right
//			case "right":
				if(x+1<input.length) {
					for(int i=x+1;i<input.length;i++) {
						if(input[i][y]=='#') {return true;}
						else if(input[i][y]=='L')return false;
					}
				}
				return false;
	}
	public static boolean left(char[][] input,int x,int y) {//checks if there is an occupied seat to the left
//			case "left":
				if(x>=0) {
					for(int i=x-1;i>=0;i--) {
						if(input[i][y]=='#') {return true;}
						else if(input[i][y]=='L') return false;
					}
				}
				return false;
		}
	public static boolean rightup(char[][] input,int x,int y) {//checks if there is an occupied seat to the diagonal right up
//		case "up&right":
			if(y-1>=0 && x+1<=input.length) {
				int i=y-1;
				for(int j=x+1;j<input.length;j++) {
					if(input[j][i]=='#'){return true;}
					else if(input[j][i]=='L'){return false;}
					else{
						if(i>0)i--;
						else return false;
					}
				}
			}
	return false;
	}
	public static boolean rightdown(char[][] input,int x,int y) {//checks if there is an occupied seat to the diagonal right down
		//	    case "down&right":
	    	if(y+1<input[0].length && x+1<=input.length) {
				int i=y+1;
				for(int j=x+1;j<input.length;j++) {
					if(input[j][i]=='#' ) {return true;}
					else if(input[j][i]=='L' ){return false;}
					else 
						if(i<input[0].length-1)i++;
						else return false;
				}
	    	}
	    	return false;
	}
	public static boolean leftup(char[][] input,int x,int y) {//checks if there is an occupied seat to the diagonal left up
//		case "up&left":
			if(x+1<=input.length && y-1>=0) {
				int i=y-1;
				for(int j=x-1;j>=0;j--) {
					if(input[j][i]=='#' ) {return true;}
					else if(input[j][i]=='L' ){return false;}
					else {
						if(i>0)i--;
						else return false;
				}}
			}
			return false;
	}
	public static boolean leftdown(char[][] input,int x,int y) {//checks if there is an occupied seat to the diagonal left down
//		case "down&left":
			if(x>=0 && y+1<input[0].length) {
				int i=y+1;
				for(int j=x-1;j>=0;j--) {
					if(input[j][i]=='#' ) {return true;}
					else if(input[j][i]=='L' ) {return false;}
					else 
						if(i<input[0].length-1)i++;
						else return false;
				}
			}
			return false;
	}
	
	
	public static void mix(char[][] input,char[][] mix_input ,int x,int y) {
		boolean OCCUPIED=true,NOTOCCUPIED=false;
		boolean cntup=up(input,x,y), cntdown=down(input,x,y),cntright=right(input,x,y),cntleft=left(input,x,y);
		boolean leftup=leftup(input,x,y),rightup=rightup(input,x,y), rightdown=rightdown(input,x,y),  leftdown=leftdown(input,x,y);
		switch(input[x][y]) {//checks whats in the seat and according to that which rule will apply in the checking
		     case 'L'://checks if one position adjacent(8) to seat is occupied
		    	  boolean flag=false;//if one seat adjacent is occupied
		    	  if (cntleft==OCCUPIED) {mix_input[x][y]='L';break;}
		    	  if (cntright==OCCUPIED ) {mix_input[x][y]='L';break;}
		    	  if (cntup == OCCUPIED) {mix_input[x][y]='L';break;}
		    	  if (cntdown==OCCUPIED) {mix_input[x][y]='L';break;}
		    	  if (rightup==OCCUPIED){mix_input[x][y]='L';break;}
		    	  if (rightdown==OCCUPIED) {mix_input[x][y]='L';break;}
		    	  if (leftdown==OCCUPIED) {mix_input[x][y]='L';break;}
		    	  if (leftup==OCCUPIED) {mix_input[x][y]='L';break;}
		    	  
				  if(flag==NOTOCCUPIED) { mix_input[x][y]='#';break;}
				  
		    case '#'://If a seat is occupied (#) and four or more seats adjacent to it are also occupied, the seat becomes empty.
		    	  int cntAdjacent=0;
		    	  if (cntleft==OCCUPIED) {cntAdjacent++;}
		    	  if (cntright==OCCUPIED ) {cntAdjacent++;}
		    	  if (cntup == OCCUPIED)  {cntAdjacent++;}
		    	  if (cntdown==OCCUPIED)  {cntAdjacent++;}
		    	  if (rightup==OCCUPIED) {cntAdjacent++;}
		    	  if (rightdown==OCCUPIED) {cntAdjacent++;}
		    	  if (leftdown==OCCUPIED) {cntAdjacent++;}
		    	  if (leftup==OCCUPIED)  {cntAdjacent++;}
		    	  
				  if(cntAdjacent >= 5) { mix_input[x][y]='L';}//becomes empty
				  else { mix_input[x][y]='#';}//becomes OCCUPIED
				  break;
		    case '.'://otherwise nothing happens but since im using two arrays...
		    	  mix_input[x][y]='.';
		    	  break;
		}
		}

	
	public static boolean compare(char[][] input, char[][]  mix_input) {//compares the versions from before mix and after mix
	//this function compares the input and its mix_input and sees if they are the same
	    for(int j=0;j<input[0].length;j++) {
		   for(int i=0;i<input.length;i++) {
			   if(input[i][j] != mix_input[i][j]) {return false;}
		   }
		   }
		return true;
	}
	public static int count(char[][]  mix_input) {//counts amount if occupied seats
		int cnt=0;
		for(int i=0;i< mix_input.length;i++) {
			   for(int j=0;j< mix_input[0].length;j++) {
				   if( mix_input[i][j]=='#') {cnt++;}
			   }
			   }
		return cnt;//counts the answer for part1
	}
    public static void main(String[] args){
    	long startTime = System.nanoTime();
    	int xlength=92,ylength=94;//lengths of plane needs to be manually changed
    	char[][] input=new char[xlength][ylength];
    	input=getInput(input);//fills input
    	char[][] mix_input = new char[xlength][ylength];//empty
    	boolean flag=false;//this is while the compare is false
    	while(!flag) { 
    		for(int x=0;x<mix_input.length;x++) {
    			for(int y=0;y<mix_input[0].length;y++) {
					   mix(input,mix_input,x,y);//changes input2   
				}
			}
			if(compare(input,mix_input)) {
				flag=true;
			}
			else {
				input=mix_input;//now we move to the next round and we save mix_input as the input so we checks its mix and so on
				mix_input = new char[xlength][ylength];//mix_input is now emtpy for next round
			}
		}
    	System.out.println(count(input));
    	long endTime = System.nanoTime();
    	System.out.println("Took "+(endTime - startTime) + " ns"); 
} 
}
