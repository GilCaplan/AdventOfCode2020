import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Stack;
import java.util.function.BiPredicate;
import java.util.regex.Pattern;
public class Puzzle18 {
	public static String getPuzzleInput() {
		String input="7 * (4 * 2 + 8 * (6 + 9) * 7 * 6) + (2 + 5 * 5 * 4 + 6 + 9) * 6\r\n" + 
				"4 * 8 * 9 + (6 * 7 * 8 * (6 * 5 * 2 + 8 + 5)) + 7\r\n" + 
				"(2 * 6 * 4 + 3 * 3) * 9 * 9\r\n" + 
				"3 * (2 * 2 + (5 * 8 * 6 * 6))\r\n" + 
				"6 + (4 + 4) * 2 + 8\r\n" + 
				"(8 + (5 + 9 + 8 + 7)) * (4 * 8)\r\n" + 
				"8 + (8 * 6 * 6 + 4 * 7) * 6\r\n" + 
				"7 * (8 * (3 + 4 * 8 * 6) * (8 + 4 + 2 * 8) + 6 * 5) + 9\r\n" + 
				"(8 + 8 * 3 + 6 * 4 * 4) * 6 + 2 + 2 + 6\r\n" + 
				"2 + (3 + (5 * 7 + 3) + 5 + 5 + 5 + 6) + 8 * (6 + 4 * 2 + 5 + 5 * 4) + 5\r\n" + 
				"7 * (8 * 9 * 2 * 6 + (2 * 7 + 7 * 2 + 2 + 8)) * 7 + 8\r\n" + 
				"(5 * 2 * 4 + 2 + 6 * (6 * 6 + 4)) + 9 + 5\r\n" + 
				"((8 + 4 * 6) * 5) + 8\r\n" + 
				"(4 + 2 * 2 + 6 * 9) * 3\r\n" + 
				"5 * 2 * (2 + 5 * 3 * 7) + (8 + (2 + 2 + 7 * 8 + 2 * 8) * (5 + 2 * 2) * 2 * 8) + 6\r\n" + 
				"4 + 8 + 6 + (7 * 2) * (8 * 5 * 5 + (9 * 9 + 4 + 6) + 6 + 6)\r\n" + 
				"((7 + 5 * 6) * 6 + (6 + 3 * 5 * 8) + (9 + 6 + 9 * 8)) * 3 + 3\r\n" + 
				"(7 * 8 * 6 + 8 * (7 + 2 + 3 + 2 + 2 * 3) + (8 * 9 * 8)) + (2 + 5 + (6 + 7 + 6)) + 5 + 8 + 5 * 4\r\n" + 
				"(2 * 8 + (7 + 7)) + 4 * 9 * 4 * (2 * (4 * 5 * 3 * 9 * 9) + (4 * 3 + 5 * 4 + 7 + 3) * (5 * 3 * 2 + 4 * 7 + 7) * 4) * 4\r\n" + 
				"7 + 9 + (3 * (7 + 5) + (7 * 5 * 3 + 9))\r\n" + 
				"5 + (9 + 6 * 7) * 9 + (8 * 5 * 5 * (6 + 8 * 2 * 4 + 3) * 8 * 9) * 9\r\n" + 
				"(4 + 3 + 9) * 9 * 6 * 7 * 6 * 6\r\n" + 
				"3 + ((8 + 9) * 6 * 6) + 9\r\n" + 
				"(7 + 8 * 2 * (2 + 8 * 2) * (7 * 3 + 4)) * (4 * 9 * (5 * 2 * 9) + (3 + 6 * 4 * 7 + 8 + 6) + (6 + 6)) * (2 + 7 * 5) + 8\r\n" + 
				"(8 * 7) + 9\r\n" + 
				"(9 * 9 + 3 * 8 * (4 * 9 + 6) + 2) + (5 + 3) * 4\r\n" + 
				"(3 * 7 * 4 + 3 * 2 * 8) + 4\r\n" + 
				"9 * 8 * (9 * (7 * 7) + 6 + 2 + 2 + 3) + 7 * 4\r\n" + 
				"4 * 3 * (5 + 8 + 8 + (2 + 4 * 3 * 5 * 5 + 7) * 5 * (4 * 7 + 2 * 2 + 3 + 7)) + 8\r\n" + 
				"7 + (2 * (3 + 2) + 5 * 9 * 6 + 4) + (8 * (5 + 5 * 9) * 9)\r\n" + 
				"(6 * 9 + 7 * 2) * ((4 + 7 + 8) + (8 + 2 * 9 * 6 * 5) + 6 * (8 + 6 * 7 * 8 + 4 * 4) * 5 + 6) * (3 + 2)\r\n" + 
				"7 * 6 + 9 * (7 + 3 + 8 + 6)\r\n" + 
				"4 * 5 * 8 + 5 + 6 + 6\r\n" + 
				"(2 * 6 * 3) * (9 * 4 * (9 * 5 + 9 * 7 * 7 * 4) * 5 * (4 * 6 * 8)) * 8\r\n" + 
				"5 * 9 + (8 * 6) + (5 + 6) * 2\r\n" + 
				"4 + 6 + 3 * (8 + 2 + 5 + (6 * 3 * 8 * 8 * 6 + 7) + 3 * (8 * 5 * 8 + 5 * 6 + 8)) + 9 * (2 * 5)\r\n" + 
				"(8 * 7 + 9 + 7 * 9 + 4) + 3 + 9 + 7 + 7 * 8\r\n" + 
				"5 * 3 * (4 + 7 + (3 * 4) + (9 + 9 * 4 * 4 + 8) * 6 * 4) * 2 * 3\r\n" + 
				"5 * 4 * ((6 * 5) * (2 + 7 + 8 + 5 * 5))\r\n" + 
				"8 + ((8 * 9 * 2 * 7 + 5 * 3) * 8 * (9 * 7) + (5 + 4 * 6 * 3 + 6 + 9) + 2 * 7) * 3 + 2 * 7\r\n" + 
				"2 * (6 + 3 + (5 + 5 * 3 + 2 + 7 + 7) + 2 + (8 * 7 + 7 * 3 * 8) + 4) * 3 * 3 * (5 + 5 * 5 * (6 * 2 + 5 + 8) + 9)\r\n" + 
				"(7 + 4 + 2 * (9 + 4 + 5)) + 7 + (2 + (6 + 2 * 2 * 7 + 7 + 5) + 6 + 9 + 4 * 8) * 3\r\n" + 
				"(8 + (9 * 7 + 8 * 4 * 7) * 9 * 5 + 4) * (2 + 7 * 6 * (8 + 8) + (3 * 3 + 8 + 8 + 2 + 9) + 7) + 4 + 2 * 9\r\n" + 
				"(2 * 4 + (9 * 4 * 8 + 2 * 8)) * 3\r\n" + 
				"6 + 9 * 2 + ((4 * 5 * 4) * 6 + 5 * 7) * 9\r\n" + 
				"5 * 2 * (7 * 3) * 7\r\n" + 
				"((5 + 4 * 5) * (3 * 9 * 8) + 4 + 5 + 7 * 2) + 3 * 4 * (3 + (6 * 2 + 2) * 5)\r\n" + 
				"2 * 8 * 2 * 9\r\n" + 
				"(6 + (9 + 7 + 9 + 4) * 8 + 2 * 3) * 3\r\n" + 
				"6 + 9 * (7 + 8 + (6 * 6 + 7 + 7))\r\n" + 
				"4 * (9 * 4 + 6) + 9 + 6\r\n" + 
				"6 * 8 * (8 * (3 * 9 * 5 + 3 * 6 * 5) + 4 * (6 + 3 + 8 * 3 * 9) * 2 * 8) + 3\r\n" + 
				"7 * 5 + ((6 + 3 * 5 + 3 * 4 * 6) + 9 + 9 + (4 + 7 + 5) * 2 * 2) * 5 * 8 * 5\r\n" + 
				"(4 + 2 + 7 * (6 + 6)) + 5 + 7 * (6 * (5 * 8 * 8 * 5 + 4 + 8))\r\n" + 
				"5 + 9 + 3 + 6 + ((7 + 2 + 4 + 2 * 4 * 3) + 9)\r\n" + 
				"4 + (7 * 9 + 5 * (2 + 6 * 7 + 2 * 8)) * 5 + (8 + 7 * 7 + 9)\r\n" + 
				"5 * 5 + 4 * (6 * 2 + 5 + 7 * 8 + (3 * 2 * 2 + 9)) * 5 + (7 * 6 * 3)\r\n" + 
				"5 + 4 * 4 + (7 * 5 * (6 + 6) + 2 + 2) * 6\r\n" + 
				"7 * 8 * (4 * 3 * 4 * 4 * 7 + 6)\r\n" + 
				"2 + 5 + 9\r\n" + 
				"8 + 2 * (8 * 3 + 3 + 7) * 8 + 4\r\n" + 
				"3 * (7 + (7 + 6 * 8 + 9 * 3))\r\n" + 
				"(3 + 5 + 7 * (7 * 5 * 8 + 7 * 4) + 6) + 9 * 7\r\n" + 
				"(3 * (6 + 7 * 7 * 3 + 3) * (8 + 2 + 6 + 6) * 2 + 7 + 4) * 9 * 6 * 3 * 8 * 9\r\n" + 
				"2 + (7 * (8 + 7 + 2))\r\n" + 
				"4 + 4 + 8 + (5 + 3 * 3 + 4 + (9 * 9 * 9 + 3 + 6 * 4)) + 4\r\n" + 
				"(7 + 9 + 8 * 7 + 5 * 6) + 8 + 7 * 6 + (7 + 2) + 6\r\n" + 
				"(3 * 9 + 3 * 4 + 6 + 9) + (2 + 6) * (2 + 7 * 6 * 9 + 4 * 9) + 3 * 9\r\n" + 
				"8 * 4 + ((2 * 4 * 8 * 5 * 7) * 5 + 2) * 9\r\n" + 
				"(6 * 5 * (4 + 9) * (3 + 7 + 7) + 7 * 6) + (5 * 4 + 5 * 6 * 6 + (8 * 6)) * 9 + 4 + 2\r\n" + 
				"(9 + (8 * 5 * 5) * 5 + 3 * (5 * 6 + 8 + 6 + 3 * 9)) * (5 + 4 + 3 + 3 * (7 + 5 + 8 * 4 + 9 * 7))\r\n" + 
				"9 + (7 * 8)\r\n" + 
				"3 + 8 * 4 * (2 + 3 + 2) + 6\r\n" + 
				"4 + 8 * (6 + 8 * 8) + 3 + 3\r\n" + 
				"(2 * (8 + 6) * 3 + 6 + 6 * 4) * 8 * 3\r\n" + 
				"((3 * 7 * 2 * 6 + 3) * 2 + 3 * 9 + (9 * 5 * 7 + 5 + 6) + 6) + 4 + 9\r\n" + 
				"(7 + (7 + 9 * 5) + 5 + 2) * 6\r\n" + 
				"9 * 7 * 9\r\n" + 
				"2 * (4 + 6 + 5 + 3 * 5) * 6 * 2\r\n" + 
				"(5 + 3 * 7 * 8 * 9) + 5 + 5 + 3 * 6 * (7 * 8 * 5)\r\n" + 
				"7 + 8 + 3 + 7 * 7 * 3\r\n" + 
				"4 + (8 * 6 + 6 + 5) + (3 + 8 + 9 * 9) * 8 * 6\r\n" + 
				"3 * 2 * (5 + 3) + 7 + 7 + (6 + 4)\r\n" + 
				"6 + 9 + 9 + (2 * 5 + 6 + 8 + 4)\r\n" + 
				"(2 + 3 * 5 + 6 + (7 * 2 + 6) * 6) + 6 * 8 * 7 + 9 * (5 + (8 + 4 * 6) + 9 + (7 + 3))\r\n" + 
				"6 + 6 * (8 + 7 + 4 + (3 * 8 + 6 * 8) + 3) + 3\r\n" + 
				"9 * 8 + (9 + 6) + 4 + 5\r\n" + 
				"7 + (6 * 8 * 3 + 9)\r\n" + 
				"6 * 5 * 8\r\n" + 
				"((4 * 5 * 2) + (6 + 4 + 5 + 5 + 7 * 5) * 7 + 5 + 9) + (2 + 8 + (2 + 4) * 8) * 4 + (3 + (7 + 2 * 9) * 2 * 6 + 3 + (2 * 5 + 5 + 4 * 4 + 7)) * (7 + 6 * 4) * 5\r\n" + 
				"6 + 6 * 9 * (7 * 2 * 4 + 8 * (7 + 2 + 9 + 2) + 8) + 6 + 5\r\n" + 
				"((4 + 4 * 8 + 3 + 8 * 2) * 4) * (5 + 4 + 5 + 5 + 3 * 8) * ((9 + 9 + 7) + 6 + 7 + (9 + 5 * 8) * (6 * 7 * 2 + 2 + 4)) * 4 * 6\r\n" + 
				"3 + 7 + 5 * 4 * 8\r\n" + 
				"((9 + 4 * 3 + 9 * 3 * 8) * 4 * 4 + 3 + 4) + 4 + 9 + (2 + 4 * 8 + 7 * 7 * 4)\r\n" + 
				"4 + 2 + 7 * 5 * 5\r\n" + 
				"(5 + 9 + 2 + 8 + 5) * (6 + 6) * 6 + 3 * 6\r\n" + 
				"2 + 6 + 5 * 7 + (5 + 8 + 7) * 9\r\n" + 
				"8 + 6 + (4 + 7 * (7 * 3 * 6 * 3) * 6 + 6) + 9 + 5\r\n" + 
				"((5 + 7 * 3 * 4 + 2 * 7) + 5 + 7 + 4 * 6) + 9 + 4 * ((2 + 6) * (4 * 5 * 3 * 8) + (3 * 5) * 3) * 6\r\n" + 
				"(2 + 2 * (7 * 8 + 3 + 2 + 3) * (5 + 7) * (6 * 2 + 6 + 9 * 4) + (9 + 3 + 5)) * 3 + 2 * 6 + 5 + 9\r\n" + 
				"9 * (4 * 6 * 8 + 6 + 3 * 9) * 7 * 6 + (8 + 3 * 4 * 4)\r\n" + 
				"7 * 2 + 5 + 3\r\n" + 
				"3 + (5 + 7 + 9 * (4 * 5 * 8 + 6) * (8 * 4 * 5 + 4) * 6) * 6 + 9\r\n" + 
				"(9 * 3 * 9 * 4 * 8 * (2 * 9 * 3)) * (4 * 8 * 7 * 8) * 9 * 3 * 3 * 3\r\n" + 
				"(3 + 6 + 4) + ((2 * 2 + 3) * 6 + 8 * 9 * 2 + (3 + 5 * 4 + 7 + 6)) * 9 + 6 + 6 * (4 * 2 + 9 + 4 * 5)\r\n" + 
				"2 * 6 * 3 * ((2 + 8 * 8) * 6 * 4 + 5) + (2 + 6) * 8\r\n" + 
				"5 + 7 * 9 + ((6 + 3 * 7 + 9 + 2 + 2) + 9) + 3\r\n" + 
				"4 * (6 * 7 * 4) * 6\r\n" + 
				"5 * (8 * 3 * 8 * 7 + (2 + 6 * 7 + 2 * 2)) * (3 * 3 + (2 * 5) * (8 + 6 * 2 + 6 + 6 * 7)) + 6\r\n" + 
				"((5 + 3 * 7 + 4 + 2 * 4) + (7 + 8 * 6)) * (9 + 6 + (9 * 6 * 4 * 6 * 6 + 3)) + 6 * 8 * 9 + 3\r\n" + 
				"(4 * 3 + 4) * 3 * (8 * 5) + 9 * 3 * 8\r\n" + 
				"2 + (9 + 5 + (5 * 4 * 5) * 7 * (5 * 7 + 2 + 3 * 8)) * 6 + 5 + 7 * 7\r\n" + 
				"8 * 8 * (4 * 8 * 5 + 7) + ((6 + 3 + 2 + 5 + 2 + 2) + 5 * 2)\r\n" + 
				"(9 * (5 * 5 * 5 + 6 * 7)) * 9 + 9\r\n" + 
				"3 + 4 * 8 + (5 * 8 * 8 * (2 * 6 * 5 * 4 * 9) * (4 + 5 + 2 + 6 * 4 * 3) + 7) + 5\r\n" + 
				"8 + ((3 * 6 * 4 + 9) * 9 + 3)\r\n" + 
				"5 * 8 + 6 + (3 + 8 * 8 + 8 * 7) + 8\r\n" + 
				"6 * 5 + 2 + 3 * 9\r\n" + 
				"8 * (6 * 6 * (7 + 7 * 6))\r\n" + 
				"8 + 7 + 8 * 6 + (6 + (7 * 3 * 4) + 4 * 3 * (3 * 9 * 3 + 9) + 6) * (2 * 7 * 3 + 4)\r\n" + 
				"6 + 9 * 9 + (4 + 4) + (6 + 9)\r\n" + 
				"3 * 8 * 8 + ((9 + 9) * 2) * 7 + 5\r\n" + 
				"4 * 6 * 3 * (5 + 9 * 4 * 2 * 5 * 2) + 2\r\n" + 
				"5 + (8 + 7 + (6 + 8 * 6 + 8 + 4) + (7 * 3 + 4 * 6) + 6 + 4)\r\n" + 
				"3 + 8 * 8 + ((9 * 3 * 3) * 6) * 6\r\n" + 
				"2 + 9 * (5 * 5 * (8 * 2 + 5 + 5 + 3)) * 8 + 8 + 3\r\n" + 
				"7 * 6 + 8 + 2 + (2 + 8 * 7 * 6)\r\n" + 
				"(9 + 5 + 9 + (5 * 5 + 7 * 9)) + 3\r\n" + 
				"3 * 7 * (3 * 6 * (7 * 4 + 5 * 5 * 8 * 9) + 7 * 4 * 4) * (4 * 6 + 7) + ((3 * 8 * 5) * 2)\r\n" + 
				"3 * 2 * 5 * ((7 * 6) * 5 * 9 + 4 + 9)\r\n" + 
				"7 * (8 + 7 * 6 * 3 * 3)\r\n" + 
				"8 * 9 * 6 + (9 + (5 + 6 * 3 * 3 + 5 * 2) + 4 + 7) + 6 + 5\r\n" + 
				"2 + 3 * 7 * 3 + ((9 * 8 + 7 * 3 * 9) + (5 + 8 + 5 * 2 + 6)) + (3 + 7 + 4)\r\n" + 
				"3 * 6 * (3 + 5 + 2 * (9 + 6 + 4 * 4 * 7 * 6) * (3 * 9 + 5 * 6)) * 5 * 4\r\n" + 
				"(9 + 7) + 7 * 7 * (6 * 5 * 5)\r\n" + 
				"(9 * 8) * 9 * 7 * (5 * 3 * 8 * 4) + 7 * 9\r\n" + 
				"5 * 6 + 9\r\n" + 
				"9 + 6 * (8 + (7 + 9 * 3 * 8 * 6 * 8) * 7 + (5 + 6 + 4 * 9)) + 5\r\n" + 
				"3 + (7 + 7 + 8 + 4 + 6) + 4 + 7 * 9\r\n" + 
				"5 * ((8 + 5 * 7) + (4 + 9 * 9)) * 7 + 3 * 9 * 6\r\n" + 
				"9 * (2 + (7 * 6 + 2 + 8 + 2)) * 2\r\n" + 
				"3 + (8 + (4 + 4) + 3 + (2 + 2 + 9 + 7 * 6 * 9) * 2 * 6) * 5\r\n" + 
				"(9 * 8) * 3 * 4 + 9 + 4 * 6\r\n" + 
				"7 + 6 * (4 + (8 + 8 + 6 + 3) + 8 * 8 * (4 + 6 + 5 * 8)) + 6\r\n" + 
				"5 * 4 + 8 * ((6 + 9 * 6) * 5 * (5 + 2 + 7 * 9) * 9 * 4 * 5) * (3 + 2) + 3\r\n" + 
				"9 + 4 * (8 + 7 * 3 * 7 * (4 + 6 * 8) + 6) * 9\r\n" + 
				"((6 * 3 + 3) * 8) + 8 + 9 * 7 + 6 + 5\r\n" + 
				"7 * (3 + (3 + 2 * 9 + 5) * 6) + 5\r\n" + 
				"3 + (2 * 2 + 7 * (2 * 9 * 9 + 2 * 9 * 6)) * 9 * 5 + 8 * 5\r\n" + 
				"3 + (9 + (8 + 4 * 5 * 4) + 7 * 8 + 7) * 9 + 2\r\n" + 
				"(2 + 8 * 5 * 8 * (3 * 5 * 3 + 6 * 3) + 3) * 6\r\n" + 
				"3 * 9 * 5 * 7 + 5 * (8 + 4 + 5 * 7 * 8)\r\n" + 
				"(3 + 8 + 3 + 7 + (9 + 8 * 7 + 2 * 5) * (2 * 4 * 7 * 4 * 6)) * 8\r\n" + 
				"(5 * (3 + 3 + 8 + 2) * 9) + 4 + 5 * 6\r\n" + 
				"(8 + 7 * 7) * (7 * (5 * 9 + 2 + 3 * 6)) + 8 + 5 * 8 * 7\r\n" + 
				"4 + (8 * (9 + 4 + 4 + 3 + 8 * 9)) + 5 * 5 * 5\r\n" + 
				"(5 + (5 * 5 * 7) + 7 * (2 + 4 * 2 + 5)) + 8 + 5 + 2 * 4 * (3 * (4 * 7 * 6 * 6 * 8 + 2) * 7)\r\n" + 
				"(9 * 4 + 6 * 8 * 2 * 8) * 2 + 9\r\n" + 
				"(6 * (7 * 3 + 2 * 5) * 9 * 4 + 4 * (9 + 4 + 4)) + 4 * 8\r\n" + 
				"7 * 5 * (9 + (4 * 4 * 4 * 6) + 4 * 6) * (6 * 8 * 2) + 9 * 6\r\n" + 
				"2 * (2 * 3) * 9 + 2 * 9\r\n" + 
				"((3 * 2 + 7) + (5 * 9 + 2 * 3 * 4 * 9) * 3 + (8 * 4 * 5 + 6 + 9)) * 6 * 3 + 6\r\n" + 
				"(3 + 8 + 9 * 2 + 5) + 2 * 2 + 7\r\n" + 
				"9 * (9 * 3 + 7) + 7 * 5 + 5\r\n" + 
				"8 * 5 * (9 + (2 + 8 + 3 * 4 * 3 * 8) * 3 * (5 + 6) + 8) * (6 + 3 * 7 * 2 * 4 * (6 + 6 * 3 * 9))\r\n" + 
				"8 + 2 * 8 * (5 + (5 + 7 * 4 + 6 * 9) * 7 * 2 + 4) * 5\r\n" + 
				"(9 * (8 * 7) + 3 * (9 + 5 * 7 + 4 + 9) + 8) * (8 + 8) * 4\r\n" + 
				"(7 + 9 * 4 + (2 * 4) + 7 * 8) * 4 + ((4 + 8 * 7 + 4 * 4) + 2)\r\n" + 
				"(5 + 4) * (2 + 2)\r\n" + 
				"5 + 4\r\n" + 
				"7 * 8 * (7 * 7 + 4 * 4 * (6 * 6 * 3)) * 7 * (6 * 5 + 7 * 5)\r\n" + 
				"5 * (6 * 8 + 5 * 6 * 6 + 2) + 6 * 7\r\n" + 
				"4 + 3 + (7 * (6 * 2 + 3) * 8) * 3\r\n" + 
				"2 + 2 + (3 * 7 * 3 + 3 + 6) * 3 + 5\r\n" + 
				"5 * ((3 * 4 + 4 + 8 * 2 + 7) + (9 * 7) + 4)\r\n" + 
				"8 * 2 * (5 + 7) + (8 * 7 * 6 * 2 * 4) * 7 * 5\r\n" + 
				"((6 + 9 * 4 * 3 * 2) * (5 * 4 * 4 + 6 + 6) * 7 * 7) * 7 * 6 + 2\r\n" + 
				"4 + (5 * (9 * 5 * 6) + 6 + 4 * 9 * 9) + 6 * 4 * 3\r\n" + 
				"5 + (7 * (5 + 3 * 6 + 7 + 5 + 6) * 8 + 3) + 3 + 7 * 5\r\n" + 
				"4 + ((8 * 6 * 9 + 6) * 4)\r\n" + 
				"(2 * (6 * 3 + 5) + 2 * (5 * 9 + 4 + 5 * 6) + 4) + 7 + (9 + 4 + 5 * 2)\r\n" + 
				"(8 * (8 * 5 * 6 + 4 * 9 + 5)) * 3 + 5 + 7 * ((3 + 7 + 2 + 3 + 7 * 5) * 9 + 7 + 6)\r\n" + 
				"8 + 2 + (9 + 6 * 9 * 5) + 8\r\n" + 
				"(3 + 7 * 3 * 9 + 6 * 3) * (4 * 2 * 5 * 2 + 5) + 6 + 5\r\n" + 
				"5 * (9 + 8 + 4) * 6 * 4 * 5 + 7\r\n" + 
				"5 + 8 + 7 * (3 + (3 * 8 * 9 * 9) + 6 * (2 + 3) * (9 + 3)) + 8 + 7\r\n" + 
				"((8 * 6 * 5 + 6) + (7 + 9) * 3 * 7 + 4 * 5) * 9 * 8 * 3\r\n" + 
				"5 * 3 + (7 * 3 * (4 * 3) * (5 * 3 + 5 + 3) * 9 + 3) * 4\r\n" + 
				"((7 * 5 + 9 + 4 * 7) * 5 + 7 * (3 * 2 + 5 * 3)) * (4 * 6)\r\n" + 
				"(8 + 3 + (8 + 8) * 6 + 5) + 9 + 6 * 3 * 9\r\n" + 
				"3 * (2 + 6 + 9 * 6 * (3 + 8)) * 4 + 3 + 9 + 6\r\n" + 
				"4 + 6 + ((2 * 7 * 5 * 4 * 9) + 3 + 5) + (8 * (6 + 4) + 5 + 8 + 3 + 5) * 2\r\n" + 
				"8 + 2 + (2 + 8) + 6 * 2 * 8\r\n" + 
				"3 * (6 + 9 + 2 * 8 + (4 + 8 * 8 + 4)) * 5\r\n" + 
				"7 * ((3 + 8 * 7) + 3 + 2 + 2) * 7 * 5 * 4\r\n" + 
				"(8 + 6 + 3 + 7 * 2) * (6 * 5)\r\n" + 
				"9 * (7 * 6) * 3 * 3 * ((6 + 7 * 6 * 6 * 2 + 9) * (8 + 5 + 3) * 8 + 8 + 3 * 5) * 8\r\n" + 
				"2 * (9 + 5 + 3) + 3 + (2 * 3 * 2 * 5) + 5 * 9\r\n" + 
				"3 + (9 + (9 * 8 * 8)) * 3\r\n" + 
				"5 + 3 * 4 + ((4 + 2 + 2 * 9 + 6 + 2) * 6 * 5 + (6 + 3 + 4 + 4 * 2)) * (5 * 7 + 8) * 4\r\n" + 
				"7 * ((8 * 3 + 3 + 9 + 9 * 8) + 3 * 5 + (2 * 3) * 6) + ((3 + 5 + 8 * 8 * 9) + 4 * 7 + 3 * 9 + 6) * 3 * 3 + (2 + 3 + (9 * 7 + 6) * 5 * 9 * 4)\r\n" + 
				"(9 + 2 + 7) + (8 + 8 * 3 * 2 * (5 + 4 * 8 + 2 + 4 * 6) + (8 + 5)) * 9 * ((3 + 8 * 4) + 7 * 7 * (5 * 3 * 3 * 7))\r\n" + 
				"((6 + 8) * 8 + 5 * (7 * 4 * 8 + 9 * 5) + 2 + 7) * 5 + 9 + (4 + 7 + (4 + 9 * 4 + 6 + 6) * (6 * 2 * 2 * 9 * 8)) + 5\r\n" + 
				"4 + (3 + 6 + 9 * 8) * 3 * 5 * 6\r\n" + 
				"(4 * 3 * (3 * 7 + 6 + 5 + 9) + 8) + 8 * 2 + 5\r\n" + 
				"7 * 7 * 8 + ((8 + 3 + 2) + (2 + 4 * 4 * 3 * 5 * 2) + 8) * (6 * 5 + 7 + (4 + 7 + 2) + 4) * 3\r\n" + 
				"5 * 8 * 4 * 8 * ((8 + 5 + 6 + 9 + 9 + 7) + 5 * 2)\r\n" + 
				"5 * 7 + (8 + 8 * 5 + 4 + 6 * 8) * ((4 * 9 * 7 + 5) * 7 + 4 * (3 * 4 * 5 + 9) * (6 + 8 + 5 * 5 * 2 + 6))\r\n" + 
				"9 * 9\r\n" + 
				"4 * 9 + (6 * 2 + 3) * 5 * 9 + 7\r\n" + 
				"6 * 7 + 8 + 5 + (5 + 2)\r\n" + 
				"2 + (3 + 3) + 3\r\n" + 
				"(8 * 6 * (4 + 7 * 7 * 7 * 3 + 6)) + (3 * 2 + 7) * 5 * ((4 * 8 + 2) * 4 * (2 * 9 * 4 + 2) + 7 * 6 + (7 + 2 * 8 + 2)) + (2 + (9 + 7 * 9 + 4 + 5)) + 3\r\n" + 
				"(8 + 8 * 2) + 9 + 5 * 5 + 6\r\n" + 
				"(5 * 6 * 4 + 7) * 9 * 8 * (5 * 7 * 4 + (7 + 9)) + 4 * (2 * 6 + 4 * 6)\r\n" + 
				"4 + (8 * 5 * 6 + 9 + 9 * 5) * 9 + 2 * 4 + (5 * 4 + 8 + 9 * 2)\r\n" + 
				"4 * 5 * 6 * (9 * 3 * 4 + (2 + 2) + 7 + 7) * 4\r\n" + 
				"(2 * (6 * 6 * 9 * 3 + 3)) + (4 * 4) * 5\r\n" + 
				"(5 + (3 * 8 * 5 + 2) + 9 + 9) + (3 + 7 + 4 * (2 + 6 + 5 * 9 * 6) + 8) * 9\r\n" + 
				"5 + (5 + 4 + 5 + 9 + (9 + 7 * 5)) + (7 + 5 * 8 * 3) + (5 + (4 * 3 + 7 + 9 * 7 * 3) * 6 * 4 * 6) + (3 + (6 + 6) + (7 * 2) * (3 * 8 + 2))\r\n" + 
				"((4 + 4 + 3 + 5 * 4 * 4) * (8 + 2) + (5 + 3 + 4 * 9) + (8 * 9 * 3 * 9 + 9 * 2) + 3 + 4) * 4 * 7 * 7\r\n" + 
				"5 * 8 + 6 + (7 * 7)\r\n" + 
				"((7 + 2 + 6) + 3) + 3 * ((9 + 7 + 2 + 5 + 7 * 8) + 5 * 8 + (3 + 9)) * (5 * (4 + 2 * 4) * 4 * 5)\r\n" + 
				"8 + (8 * 8 + (8 * 3 + 6 + 3 + 9) + 5) * 3 + 3 * 5\r\n" + 
				"(5 + 2) * (9 * 9 * (6 * 6)) + 3 * 3 + 4 * 5\r\n" + 
				"6 * 7 + 6 * 7\r\n" + 
				"(4 * (7 + 2 + 5 * 7 + 2 * 7)) * 4 * (4 + 7)\r\n" + 
				"3 * 7 * (7 + 9 + 6 + 9) + 6 + 6 * 2\r\n" + 
				"3 + 4 + 9 * (7 + (4 * 4 + 2 * 8) * 9 * (4 * 8 * 2 + 7 * 3) + 8) * 3\r\n" + 
				"6 * 6 + (4 + 3) * (2 * 2 * 9 + 9 * 4 * 4) + (4 + 7 * 2)\r\n" + 
				"4 * (6 + 7 * (7 + 2) + (2 * 5 * 2) * 5 + 3) + 4 + 4 + 7\r\n" + 
				"((7 + 6 * 7 * 3 * 6) * 4 + (2 * 4 * 8 * 2 + 7 + 3)) + 4\r\n" + 
				"5 + ((2 * 9 * 7) * 6 * 6 + 8 * (8 * 8) * 3)\r\n" + 
				"((5 * 6) * (2 * 2)) + (6 * 4) + 7\r\n" + 
				"(7 * 4 * 2 * 6) + 7 * (8 * 7 + 7 * (2 * 3 * 2 + 2) * 4) * 4\r\n" + 
				"3 + 7 + 5 + 9 * ((8 * 7) + 7 * 9) + 8\r\n" + 
				"((8 + 9 + 6 + 4 + 3 + 9) + (9 + 2 + 5 + 6 * 7) * 3 * 9 * 4) + 4 * 4 * 7\r\n" + 
				"(7 * 6 * 2) * (5 + 2 + (9 * 3 + 3 * 5 + 7) + 6) + 4 + (9 * 9 * 7 + 2) * 2 * 5\r\n" + 
				"(3 * 9) * 8 * 4 * 4 * 5\r\n" + 
				"2 * 2 + 2 * 8 * (8 + (8 + 2 + 8) + 4 + (8 + 8 * 5 * 4 * 2))\r\n" + 
				"4 + ((3 + 9 * 6 + 9 * 6 * 5) + 9 * 9 * 8 * 8) + 5 + 8\r\n" + 
				"(7 * 8 * 7 * 6 * 6 + 4) * (2 * (5 + 4 * 4 + 8 + 8 * 7))\r\n" + 
				"5 * (7 + 8 * 5 * 4) + ((6 + 7 + 5 + 4) * 5 * 3 + 3) * 6 * 3\r\n" + 
				"2 * (7 + 4 + 2 * 9 * 3 + 4) * 6 * 9 * 3\r\n" + 
				"(3 + (4 * 2 * 4 * 2 * 4 * 5) * (5 + 8)) * 3 + 9 * 4 * 3 * (3 * (6 * 9 * 6 + 8) * (9 * 4 + 8 + 3) + 3 + (6 + 3 + 8 + 4) + (3 + 4 * 2 * 4))\r\n" + 
				"5 + (9 + 5) + 6 * (3 * 5 * 5 * (4 + 8) * 3) + 5 + 9\r\n" + 
				"6 + 2 * 5 + 3 * (2 + 5 * 7 * 6 * (8 * 8 * 2 * 7 * 8) + 7)\r\n" + 
				"7 * 3 * 7 * 5\r\n" + 
				"7 + ((9 * 9) * (8 + 4 + 5 * 5) * 9) + 2 * 7 + (5 + 4 + 6 * 5 + 4 + 6)\r\n" + 
				"((6 + 7 + 8 + 9 + 5) + 4 + (9 + 9 + 2) * 9 + 7) + 7 + 8 * 3\r\n" + 
				"2 + (2 * 6 * (7 * 4) + 6) + 6 + 6 * 8\r\n" + 
				"(4 * 4 * 8) + 3 * 3\r\n" + 
				"((4 + 5 * 4 + 2 + 6 + 5) + 6) * 9 + 9 + 2\r\n" + 
				"6 + 3 + ((3 * 5 * 3 + 6 + 9 + 5) + (9 + 9 + 8) * (8 * 2 + 5 + 5) + 5 + 9 + (7 + 3 + 5 * 7 * 7 * 4)) + 2\r\n" + 
				"9 * (9 + (4 + 8) * 4 * 4 + 9) + 8\r\n" + 
				"(9 * 8 * (3 + 9 * 4 + 7 * 4) * (3 + 5 * 4 + 6 + 3)) * 9 * (3 + 3) + 5\r\n" + 
				"6 * ((8 + 5 * 2 * 9 * 5 + 7) * 9 * 4) + 9\r\n" + 
				"5 + (7 + (5 * 2 + 3 + 8 * 3) + 2 + 6)\r\n" + 
				"3 + 9 * 5 + ((8 * 4 * 2) * 5 * 6 + 5 + (4 * 5 + 7 * 9 + 8 + 3)) + 4 + (5 * 7)\r\n" + 
				"6 * 2 * 3 * 7 * 3\r\n" + 
				"(2 * (4 * 3 * 4 + 8) + (7 * 6 * 9 * 3) + 2 * 4 + 2) + 5 * 9 * (4 + (9 + 5)) + 9 * 2\r\n" + 
				"(6 * 8 + 9 + 7 + 3 * 7) + 8 * 3 * 4 + (4 * 8 * 4 + 6 * 3) * 7\r\n" + 
				"5 + (6 + (9 + 2 * 2 * 9 + 5) * 7 * 2 + 9)\r\n" + 
				"7 + 9 * ((6 + 2 * 7 + 4) + 6 + 5 * (5 * 3)) * ((9 + 8) + 6 + 8 * 4) * (3 + 4 * 3 + 8)\r\n" + 
				"((2 + 5 + 4 + 7 * 4 * 6) * 5 + 9) + 8 + (6 + 9 + 8) + 3\r\n" + 
				"3 * 2 + 5 + ((4 + 7 + 4 * 6 * 9) + 8) * 9 + 7\r\n" + 
				"3 * (6 * (4 + 9) + 7 * 5)\r\n" + 
				"(6 + 6 * 9 * 7) * 3 * 8\r\n" + 
				"4 + 8 * ((5 * 9) * 6) * 6\r\n" + 
				"3 * 6 * 4 + (3 + (4 * 2) + 6 + 4 + 9)\r\n" + 
				"4 + 7 + (3 * (6 * 3) * 7)\r\n" + 
				"(7 + 5 + (5 + 9 * 7) * 7 * 6 * 2) * 7 + (4 * (6 * 9 + 4 * 4) + 5 + (4 + 6 * 8 * 5 + 3) * 3)\r\n" + 
				"8 + 9 * (8 + 3 + 3 + 6 + (3 + 2 + 6 * 5 * 8 + 7)) * 2\r\n" + 
				"4 + 7 * (6 * 3 + (8 * 9) + (9 + 4 + 3)) + (4 * 5) * 6 * 6\r\n" + 
				"((6 * 5) + (2 + 6 * 7 + 6 * 6 + 3) * 4) * 6 + 7 + 5\r\n" + 
				"6 + 9 * 6 + 3 * 5 * 3\r\n" + 
				"(3 * 3) + 8 + 5\r\n" + 
				"(3 * 9 + 4 * 4 * 9) + (4 + 4 + 8 * 7) * 3 + 2 * 7 + (7 + 5 + 7 + 6)\r\n" + 
				"9 + ((6 * 6 + 4 + 2 * 3) + 3 * 7 * (9 + 7 + 9 * 6 + 3) + 9 + 2) * 8 + 9\r\n" + 
				"6 + 4 * 9 + 6\r\n" + 
				"6 * 8 + 7 * 9 * (6 + 2 * 6 * 8 * 2 + 2) + 3\r\n" + 
				"3 * ((3 * 7) + 8 * (2 + 8 + 8 * 8 * 5 + 7)) + ((9 * 8 * 5 + 6 + 3 + 3) * (2 * 3 * 8) + 3 * 3 * 5 + 7) + 3 + 6 + 6\r\n" + 
				"(2 * (9 * 2 + 4 + 9 + 5 + 5)) + 6\r\n" + 
				"2 * (7 + 3) + 7 + ((9 * 6 + 3 * 3) * 7 * (5 * 2)) + 3\r\n" + 
				"3 * ((4 * 2 + 5 + 5 + 9) + 9 + (4 * 8 + 8 + 7 + 3 + 4) * 3 * 6) * 7\r\n" + 
				"(8 * 3) * 6 + 6 + 9 + ((6 * 9) + 3 + (7 + 7 + 8 * 6 + 6 + 4) * 4)\r\n" + 
				"6 + 6 + (6 + (7 * 7 * 7 * 6) * (2 * 7 + 4 + 6 + 5 + 6) * 9 * 5 + (7 * 8 * 3 * 9 + 5))\r\n" + 
				"7 * (5 * 2 * 3 + 5) * 4\r\n" + 
				"6 + (4 + 8 + 3 + 4) + (4 * 3 * 4 + (6 * 3) + 5 * 7)\r\n" + 
				"(3 * 5) + 8 + ((2 * 6 + 8 * 5 + 5 * 4) + (6 + 9 + 8) + 9) * (6 * (3 + 9) * 8)\r\n" + 
				"4 + 8 + 3 * (9 + (9 + 8 + 4 * 8) + 8)\r\n" + 
				"(9 * (8 + 4 * 4 * 8) * 9 + (7 + 2 * 8 * 7 * 9 * 8) + 4) + 2 + 6 * 2 + 8 + 5\r\n" + 
				"7 * ((9 * 9 + 7 + 4) + 2 * (7 + 4 * 6) * 7 + 4) * 7 * 3 + 7 * 9\r\n" + 
				"(9 + 5) * (7 + 5 + 9 * 9) + 3 + 7\r\n" + 
				"2 + ((5 * 5 + 4 * 6 + 8) + (9 + 5 + 7 * 6 * 7 + 5) * 2 * 2 + 6) * 7 + 7\r\n" + 
				"(6 + 5 + 8 * 3) + ((7 + 4 + 6 + 6 + 8) + (7 + 3 + 5)) * 2\r\n" + 
				"8 * 7 + 8 * 9 + (7 + (9 * 9 * 2 * 9 * 4 * 7) * 2 + 8)\r\n" + 
				"9 + ((7 + 5 + 2 * 3) * (8 * 4 + 9 + 6) * 6 + (3 + 2 + 4 + 5) * 4) * 4 + (9 * 7 + 9 * 2 * 2)\r\n" + 
				"2 * ((4 + 3 * 7) * 8 + 6 + 2 * 9 + 3) + 6 + 6 + 2 * 7\r\n" + 
				"5 + 5 + ((5 * 8 * 9 + 9 * 3) * 9)\r\n" + 
				"6 + ((7 + 6 * 9 + 7) + 4) * 7 + 3\r\n" + 
				"7 + 8 * 7 * 3 * ((8 * 9 + 5) + (2 + 6 + 6) * (3 * 4 * 9) * 8 + 6 + 9) + 3\r\n" + 
				"2 + 2 + ((8 * 8 * 3) * (5 * 7 * 7 * 5 * 4)) * 7\r\n" + 
				"(4 * 4 + 3) + 6\r\n" + 
				"5 * 7 + (7 + 4) * ((7 + 3) + 5 * 2 * 4 + (2 + 5))\r\n" + 
				"(5 + 3 + 2) * 6 + 2 + 6\r\n" + 
				"5 * (8 * (7 + 9 + 7 * 3 * 4 * 9) + (5 + 3 + 6 + 4 + 2 * 2) + 7 * 9 + 2) * (3 * 6 * 7 + 6 * 4)\r\n" + 
				"4 + ((6 + 2 * 6 * 2 * 7) * (6 * 3 + 2 + 5) * 7)\r\n" + 
				"6 + 9 + (8 + 4)\r\n" + 
				"2 + 2 + 5 + 9 * 4 * 7\r\n" + 
				"((8 + 4 * 6 + 8) + 3 * 9 + 2) + 4 + 3\r\n" + 
				"7 + 2 + 6 + ((7 + 3 * 3 + 6 + 3) * 9 + 3 * 7 * 5) * 9\r\n" + 
				"6 + (8 * 2 + 4)\r\n" + 
				"5 + (7 + 9 * 6) + 4 + (2 * 9 * 3 * (6 + 4)) * 9 + 8\r\n" + 
				"7 + 8 + (7 * (6 + 3 * 7 * 3 + 8 + 3)) * 3 * ((6 + 8 + 6 + 6 * 5) * (4 + 8 + 5 * 8) * 9 + 9 * 6) * (2 * 3 + 2 * 8 * (7 + 6) + 5)\r\n" + 
				"(5 + 9 * (9 * 7 + 6) + (5 + 5 * 6 + 7 * 3 + 7) * (5 * 7 * 6 * 9 + 4 + 7)) * 2 * 5 + (8 * 2 + 4 + (5 * 9 + 4 + 3 * 2)) + 8 + 4\r\n" + 
				"3 * 3 + 7 * 3 * (9 + (3 * 2 * 7 + 3 + 8) * 5 + 8 * 2 + 2) * 2\r\n" + 
				"3 + 8 + 8 + 2 + 2 * (3 + (3 + 8 + 3))\r\n" + 
				"(3 + 5 * 6 + 3 * 4 * 6) * ((5 + 4 * 9 + 3 + 7) * 3 * 4 + 4) + 6 * (9 + 8 + 6 * (7 * 4 * 5 * 2) + (7 + 7 * 5) * (3 * 6)) + (6 * 9 * 4 * 9 + 7)\r\n" + 
				"5 + 9 + ((8 + 8) + 9 * 6 + 7 * (4 + 9)) + 4\r\n" + 
				"7 * (6 * 5 + 4 * 8) * 2 * 5\r\n" + 
				"7 + 4 * ((7 * 4 * 2 + 9 * 4) + 8 * 2 + 4 + 8 * 5) * (2 + (3 * 2 * 3) * (7 + 3 * 9 + 5 * 2) * (5 * 5 * 6 * 6))\r\n" + 
				"6 + ((7 * 3 * 3 + 7 + 7 * 3) * 2 + 5 * 3) + 2 + 3 + 8\r\n" + 
				"(7 * (6 + 7) + 6 * 2 * (7 * 7 * 3 * 4)) * 4 * 5\r\n" + 
				"6 + 5 * (7 + 8 * 8)\r\n" + 
				"5 * 2 + ((8 + 4 * 8 + 6 + 9 * 3) * 9 * (3 + 7 * 5 + 3 * 8 + 6) * 2 * 8 + 4) + 3 * 8 + 7\r\n" + 
				"8 + 9 * (2 * 5) + 8 + (4 * 7) * (8 + 5 * 7 * (9 * 2 + 7 + 4 + 6 * 7) + 3)\r\n" + 
				"5 * 9 * (2 * 8 * 5 + 5 * 7 * 7) + 9 + 6\r\n" + 
				"2 * 5\r\n" + 
				"5 + (3 * 2 * (4 * 4 * 8 + 6 + 2)) * (3 * (9 + 7 + 3 * 7 + 3) + 8 + (5 + 9 * 4 + 4) * 8 * 4) + 9 + 6 + 2\r\n" + 
				"9 * 3 * 3 * (4 * (5 * 8 + 5) + 7 + 3 * (6 * 8 * 9 * 2 * 4 + 4)) * 7\r\n" + 
				"(4 + 9) * 8 * 2 * 5\r\n" + 
				"9 * 8 + (5 + 3 + 9 + 9 + 4)\r\n" + 
				"4 + (8 * (7 + 6 + 3) * 4 + (2 + 6 * 5 * 2 * 2)) * (6 + (4 * 5) * 5) + 5 + 4\r\n" + 
				"6 + 5 + (6 + (9 + 6 * 2) * 7 * 8 * 6 * 7)\r\n" + 
				"2 * 7 * 8\r\n" + 
				"9 + 2\r\n" + 
				"8 * (7 + 3 + 5 * (3 * 6) * (9 + 6 * 2))\r\n" + 
				"(3 + 9 * 5 * 7 * 7 * 3) + (3 * 8 * (2 + 8 * 4 + 4 + 7) * (2 + 8 * 6) + 5) * (4 * 3 * 5) * (8 * 8 * 3 + 7)\r\n" + 
				"(9 + 6) * 6 * 7 * 5 + (6 * (5 * 2 + 7 * 6) + 5 * 2 * 8) + 6\r\n" + 
				"3 * 6 + (9 + (7 * 3 + 8 + 3)) + 8 * (8 * 9 + 7)\r\n" + 
				"(5 + (9 * 7 * 6) * (4 + 4 + 8 + 4 * 4 * 2)) * 5\r\n" + 
				"9 + (8 * (7 * 6 + 2 * 4) + 7) * 4 + 8 + 8 * (9 * (6 + 4 + 7 * 9 + 9 * 7) + (7 + 4 * 7 + 6 * 4) * 7 * 9)\r\n" + 
				"6 * 2 + (4 + 2 * 7 + 6 * 2 * (3 + 8 + 6 + 8)) * 7\r\n" + 
				"7 + 7\r\n" + 
				"8 * 6 * 9 * 6 + 7 + 4\r\n" + 
				"6 + 3 * (7 + 3 * 5 * (8 * 2 + 5))\r\n" + 
				"3 * (3 * 9 * 8 + 5 * 5 + (6 + 8))\r\n" + 
				"(5 * (3 * 4 * 9 * 6 + 6)) * 4 + 3 * 8\r\n" + 
				"(3 + 6 + (2 * 8 * 8 + 4) * 7 * 5 + 3) * 9 * 5 * 5 * 8\r\n" + 
				"(5 + 9 * (6 * 2 * 2 + 7 + 2 + 8)) * 5 + 6 + 7\r\n" + 
				"7 * 4 + (6 + 8 + (4 * 8 + 9 + 9 + 5 + 2) + 8 + 6 + (4 * 3 + 4 * 2 + 4 + 5)) + 2 + 6\r\n" + 
				"4 * (5 + (8 + 4 * 5) * 8) + 2 * 7 * 7\r\n" + 
				"2 * 7 + ((3 * 4 + 9 * 4 + 3) * (6 * 5 + 2 + 2 + 6 * 3) * (3 * 8 * 4 + 8 + 6 + 9) * 4 * 4 * 6) + 8 + (2 * (2 * 9 + 2 * 3) * 7 + 5) + 3\r\n" + 
				"(8 * 7) * 8 * (6 + 6 + 8 * 2 + 3) * 9 * 9 + (9 + 9 + 2 + 5)\r\n" + 
				"3 * ((4 + 9 * 8 + 4) + 8 + 3 * 4) * 9 + 4 * 9 + 4\r\n" + 
				"7 * 6 + 6 * 6 * 9\r\n" + 
				"3 + 8 * (6 * (6 + 2 + 9) * 6 + 2 + 6) + 4\r\n" + 
				"((4 + 8 * 3 * 3) + (4 + 5) * (2 * 8 * 9 + 6) * (7 * 6 + 5 * 4 + 2)) + 5 * (7 * 5) * 6\r\n" + 
				"7 + 7 * 2 * (7 * 7 * 2) * 7 + 7\r\n" + 
				"9 * (8 * 8 * 5 + 3) + 2 + (8 + (6 * 2) + (5 + 3 + 9 * 8 + 4)) * (4 + (7 * 7 + 3 * 7 + 4 * 4) + 9)\r\n" + 
				"2 + 8 * 9 + 8 + (6 * 8 + (8 + 9 * 7 * 3 * 3 * 9) + 6 * 9 + 2)\r\n" + 
				"6 + (4 + 5 * 5 + (6 + 6 * 5 + 9 * 6 * 3) * 3) * 5 + 8 + 9 * 2\r\n" + 
				"2 * 7 * (5 * 2 + 6 * 3 + 4 * 9) + 6\r\n" + 
				"(3 + 7 * 3 * 6) + 3 + 6 + (5 * 6 * 7 * (9 * 4 + 7 + 9 * 9) * (6 + 9 * 2 * 5) * (4 + 7 + 2 + 4 + 6 + 8)) + 3\r\n" + 
				"6 * 5 + ((9 * 2 * 8 + 9 + 8 * 2) * 9 * 3 + 4 + 8 * 3) * 7\r\n" + 
				"9 * 4 * (9 + 4 + 7 * 2 * 2) * 6 * 5 * 5\r\n" + 
				"5 + (8 + 8 + 2 * (7 * 6 * 4) * 7 * 9) * 4 + (9 * 9) * 9 + 4\r\n" + 
				"5 + 8 * 9 * (7 + 8 + 2 + 5) + 5\r\n" + 
				"5 * 8 * ((7 * 2 + 4) * 2 + 3 + 9)\r\n" + 
				"8 + (3 + 8 * (3 * 2 + 9 + 3 * 6 + 2) + 5 * 5) * 2\r\n" + 
				"(8 + 3 * 8) + (8 * 8 + 5 + 7 * 7 + 3) + 4 * 3 * 9 + 9\r\n" + 
				"5 * (5 + 6 * 6) + (3 * 7 * 6 + 9 * 4 + 9) + 9\r\n" + 
				"2 + 5 + 6 * (9 * 2) + 2 + 4\r\n" + 
				"5 + 3 + (7 + 9 * 3 + (4 * 5)) * 9\r\n" + 
				"(8 + 5 + 9 + 7) * 6";
		return input;
	}
	

	    public static void main(String[] args) {
	       part1();
	       part2();
	    }
	    public static void part1() {
	    	long sum = 0;
	        for(String line : getPuzzleInput().split("\r\n")) {
	            sum += eval(line);
	    }
	        System.out.println(sum);
	    }
	    public static long eval(String input) {
	        int depth = 0;
	        int start = -1;
	        int end = -1;
	        for (int i = 0; i < input.length(); i++) {
	            if (input.charAt(i) == '(') {
	                if (depth == 0) {
	                    start = i;
	                    depth++;
	                } else {
	                    depth++;
	                }
	            } else if (input.charAt(i) == ')') {
	                depth--;
	                if (depth == 0) {
	                    end = i;
	                    long repl = eval(input.substring(start + 1, end).trim());
	                    String upIn = input.substring(0, start) + repl + input.substring(end + 1);
	                    return eval(upIn);
	                }
	            }
	        }

	        return finalEval(input);
	    }

	    public static long finalEval(String input) {
	        String[] parts = input.split(" ");
	        long rv = Long.valueOf(parts[0]);
	        int i = 1;
	        while (i < parts.length) {
	            switch (parts[i]) {
	                case "+":
	                    rv += Long.valueOf(parts[i + 1]);
	                    break;

	                case "*":
	                    rv *= Long.valueOf(parts[i + 1]);
	                    break;

	                default:
	                    throw new IllegalStateException(parts[i + 1]);
	            }

	            i += 2;
	        }
	        return rv;
	    }
	
	    public static void part2() {
	    long sum = 0;
	    for (String line : getPuzzleInput().split("\r\n")) {
	        sum += eval2(line);
	    }
	    System.out.println(sum);
}
	
	public static long eval2(String input) {
	    int depth = 0;
	    int start = -1;
	    int end = -1;
	    for (int i = 0; i < input.length(); i++) {
	        if (input.charAt(i) == '(') {
	            if (depth == 0) {
	                start = i;
	                depth++;
	            } else {
	                depth++;
	            }
	        } else if (input.charAt(i) == ')') {
	            depth--;
	            if (depth == 0) {
	                end = i;
	                long repl = eval2(input.substring(start + 1, end).trim());
	                String upIn = input.substring(0, start) + repl + input.substring(end + 1);
	                return eval2(upIn);
	            }
	        }
	    }
	    return finalEval2(input);
	}
	
	public static long finalEval2(String input) {
	    List<String> parts = new ArrayList<>(Arrays.asList(input.split(" ")));
	
	    for (int i = 0; i < parts.size(); i++) {
	        if (parts.get(i).equals("+")) {
	            parts.set(i - 1, Long.toString(Long.valueOf(parts.get(i - 1)) + Long.valueOf(parts.get(i + 1))));
	            parts.remove(i);
	            parts.remove(i);
	            i--;
	        }
	    }
	    for (int i = 0; i < parts.size(); i++) {
	        if (parts.get(i).equals("*")) {
	            parts.set(i - 1, Long.toString(Long.valueOf(parts.get(i - 1)) * Long.valueOf(parts.get(i + 1))));
	            parts.remove(i);
	            parts.remove(i);
	            i--;
	        }
	    }
	
	    return Long.valueOf(parts.get(0));
	}
	
	}
